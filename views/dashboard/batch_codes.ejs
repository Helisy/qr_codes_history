<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Produtos</title>
    <script src="https://kit.fontawesome.com/2f7352ec62.js" crossorigin="anonymous"></script>
    <script src="/public/scripts/http_helper.js"></script>
    <script src="/public/scripts/notifications.js" defer></script>
    <script src="/public/scripts/inputs.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>

    <link rel="stylesheet" href="/public/styles/main.css">
    <link rel="stylesheet" href="/public/styles/buttons.css">
    <link rel="stylesheet" href="/public/styles/structure_cards.css">
    <link rel="stylesheet" href="/public/styles/grid_table.css">
    <link rel="stylesheet" href="/public/styles/info_card.css">
    <link rel="stylesheet" href="/public/styles/inputs.css">

    <style>
        .btn
        {
            display: flex;
            flex-direction: row;
            align-items: center;
        }

        nav .btn > i 
        {
            margin-right: 1rem;
            font-size: 1.5rem;
        }

        #qr_code_container canvas,
        #qr_code_container img 
        {
            width: 100% !important;
            height: 100% !important;
        }
    </style>
</head>
<body>
    <nav>
        <div>
            <a class="btn basic" id="shopee" href="/dashboard/shopee">Shopee</a>
            <a class="btn basic" id="shein" href="/dashboard/shein">Shein</a>
        </div>
        <div>
            <a class="btn primary" id="insert-code" href="/dashboard/insert-code">
                <i class="fa-solid fa-qrcode"></i>
                Inserir Código
            </a>
        </div>
        <div>
            <a class="btn basic" id="batches" href="/dashboard/batches">Lotes Abertos</a>
            <a class="btn basic" id="history" href="/dashboard/history">Histórico</a>
        </div>
    </nav>
    <div class="notification" id="notification">
        <div>
            <i class="fa-solid fa-check"></i>
            <div>
                <p></p>
            </div>
        </div>
    </div>
    <div class="hover-container">        
        <div class="ifc-loading" id="loading_spinner">
            <div class="lds-dual-ring"></div>
            <label for="">Aguarde...</label>
        </div>
    </div>
    <div class="container">
        <div class="content" id="title">
            <!-- <div class="struct-card row align-center space-between">
                <div>
                    <h1>Shein #135</h1>
                    <span>05/05/2025 03:50:23</span>
                </div>
                <button class="btn primary">Confirmar Entrada</button>
            </div> -->
        </div>
        <div class="content" id="title">
            <div class="struct-card row align-center space-between">
                <div class="flex">
                    <button class="btn tab-switch basic" onclick="switchTabs(this)" data-show="true" data-tab-id="1">A Bipar</button>
                    <button class="btn tab-switch basic" onclick="switchTabs(this)" data-show="false" data-tab-id="2" data-function="loadQrCode">Já Bipados</button>
                    <div class="spacer vertical"></div>
                    <button class="btn primary" onclick="window.location.href = window.location.pathname + '/print'"><i class="fa-solid fa-print"></i>Imprimir</button>
                </div>
                <h2 id="counter"></h2>
            </div>
        </div>
        <div class="content tab" id="title" data-tab-id="1" data-display="">
            <div class="struct-card align-start" id="init_reader_header">
                <button class="btn primary" onclick="initRead()">Iniciar Leitura</button>
            </div>
            <div class="struct-card align-center" id="qr_corder_reader" tabindex="0">
                <!-- <button class="btn primary">Confirmar Leitura</button> -->
                <!-- <h3>Pressione espaço para avançar</h3>
                <span>DEWFWFWEFW</span>
                <img class="img25" src="/public/images/shein_logo.jpg" alt=""> -->
            </div>
        </div>
        <div class="content tab grid c6" id="qr_code_container" data-tab-id="2" data-display="grid">
            <!-- <div class="struct-card align-center">
                <img src="/public/images/shein_logo.jpg" alt="">
                <span>GC2506281121629186</span>
            </div>     -->
        </div>  
    </div>
    <script>
        const current_page = document.location.pathname.split("/")[2];
        document.getElementById(current_page).classList.add("selected");

        const batch_id = document.location.pathname.split("/")[3];

        const title = document.querySelector("#title");
        const qr_code_container = document.querySelector("#qr_code_container");
        const qr_corder_reader = document.querySelector("#qr_corder_reader");
        const init_reader_header = document.querySelector("#init_reader_header");
        const counter = document.querySelector("#counter");

        const hover_elements = 
        {
            loading_spinner: document.querySelector("#loading_spinner"), 
        }

        const hover_container = document.querySelector(".hover-container");
        hover_container.style.display = "none";

        function toggleHoverContainer(el_id){
            if(hover_container.style.display == "none"){
                hover_container.style.display = "flex";

                for (const [key, value] of Object.entries(hover_elements)) {
                
                    if(key == el_id){
                        value.style.display = "unset";
                        continue;
                    }

                    value.style.display = "none";
                }
                
            }else{
                hover_container.style.display = "none";
            }
        }

        async function loadQrCode(){
            toggleHoverContainer("loading_spinner");

            qr_code_container.innerHTML = "";

            let url;
            
            switch (qr_code_container.dataset.batchStatusId) {
                case "1":
                    url = `/api/v1/codes?batch_id=${batch_id}&has_entry=true&has_exit=false`;
                    break;
                case "2":
                    url = `/api/v1/codes?batch_id=${batch_id}&has_entry=true&has_exit=true`;
                    break;
                case "3":
                    url = `/api/v1/codes?batch_id=${batch_id}&has_entry=true&has_exit=true`;
                    break;
                default:
                    break;
            }
            
            let codes = await fetchInfo(url);
            codes = codes.data;

            qr_corder_reader.style.display = "none";
            init_reader_header.style.display = "flex";

            if(codes.length < 1){
                toggleHoverContainer();
                return;
            }

            codes.forEach(item => {
                const card = document.createElement('div');
                card.className = 'struct-card align-center';

                // Texto
                const span = document.createElement('span');
                span.textContent = item.code;

                const qrDiv = document.createElement('div');
                new QRCode(qrDiv, {
                    text: item.code,
                    width: 256,
                    height: 256
                });

                card.appendChild(qrDiv);
                card.appendChild(span);
                qr_code_container.appendChild(card);
            });

            toggleHoverContainer();
        }

        const tabFunction = 
        {
            loadQrCode: loadQrCode,
            // showInserCodeHeader: showInserCodeHeader
        }

        async function switchTabs(e)
        {
            if(e.dataset.show === "true") return;

            if(!!e.dataset.function){
                await tabFunction[e.dataset.function]()
            }

            e.classList.add("selected")
            e.dataset.show = "true"
            e.scrollIntoView();

            document.querySelectorAll(".btn.tab-switch").forEach(el => {
                if(el.dataset.tabId != e.dataset.tabId ){
                    el.classList.remove("selected")
                    el.dataset.show = "false"
                }
            })

            document.querySelectorAll(".content.tab").forEach(el => {
                if(el.dataset.tabId != e.dataset.tabId ){
                    el.style.display = "none"
                }else{
                    console.log()
                    el.style.display = el.dataset.display;
                }
            })
        }

        function defineTabs(){
            let tab_id;

            document.querySelectorAll(".btn.tab-switch").forEach(el => {
                if(el.dataset.show === "true" ){
                    el.classList.add("selected")
                    tab_id = el.dataset.tabId;
                }else{
                    el.classList.remove("selected")
                    el.dataset.show = "false"
                }
            })

            document.querySelectorAll(".content.tab").forEach(el => {
                if(el.dataset.tabId != tab_id ){
                    el.style.display = "none"
                }else{
                    el.style.display = el.dataset.display;
                }
            })
        }

        defineTabs()

        async function main() {
            toggleHoverContainer("loading_spinner");
            let batch = await fetchInfo(`/api/v1/batches/${batch_id}`);
            batch = batch.data;

            qr_corder_reader.style.display = "none";
            init_reader_header.style.display = "flex";

            qr_code_container.dataset.batchStatusId = batch.status_id;

            let status_color;
            let button_text;

            let quantity;

            switch (batch.status_id) {
                case 1:
                    status_color = "danger"
                    button_text = "Confimar Entrada"
                    quantity = batch.has_entry;
                    break;
                case 2:
                    status_color = "success"
                    button_text = "Confimar Saída"
                    quantity = batch.has_exit;
                    break;                   
                case 3:
                    status_color = "warning"
                    button_text = "Concluir Lote"
                    quantity = batch.has_exit;
                    break;             
            }

            counter.innerHTML = `${quantity}/${batch.quantity} bipados`

            let title_html = 
            `
            <div class="struct-card row align-center space-between">
                <div>
                    <h1>${batch.marketplace_label} #${batch.id} <span class="label ${status_color}">${batch.status_label}</span></h1>
                    <span>${corDate(batch.created_at)}</span>
                </div>
                <button class="btn primary" onClick="confirmBatch()">${button_text}</button>
            </div>
            `;

            title.innerHTML = title_html;

            toggleHoverContainer();
        }

        main();

        async function confirmBatch() {
            toggleHoverContainer("loading_spinner");

            let status_id = parseInt(qr_code_container.dataset.batchStatusId);

            const response = await postData(`/api/v1/batches/${batch_id}`, "put", {status_id: status_id + 1})

            switch (response.code) {
                case 200:
                    if(status_id + 1 > 3){
                        window.location.replace("/dashboard/batches/");
                    }else{
                        window.location.reload();
                    }
                    
                    break;
                case 400:
                    pushNotify("error", response.message)
                    toggleHoverContainer();
                    return;
                case 500:
                    pushNotify("error", "Server Error")
                    toggleHoverContainer();
                    return;
            }
        }

        async function initRead() {
            let url;
            
            switch (qr_code_container.dataset.batchStatusId) {
                case "1":
                    url = `/api/v1/codes?batch_id=${batch_id}&has_entry=false&has_exit=false`;
                    break;
                case "2":
                    url = `/api/v1/codes?batch_id=${batch_id}&has_entry=true&has_exit=false`;
                    break;
                case "3":
                    return;
            }
            
            let codes = await fetchInfo(url);
            codes = codes.data;

            qr_corder_reader.innerHTML = '<div class="lds-dual-ring"></div>';

            if(codes.length < 1){
                qr_corder_reader.innerHTML = "";
                const h3 = document.createElement('h3');
                h3.textContent = "Todos os Qr Codes foram lidos";
                
                qr_corder_reader.appendChild(h3);

                qr_corder_reader.style.display = "flex";
                init_reader_header.style.display = "none";
                return;
            }

            const qrDiv = document.createElement('div');
            new QRCode(qrDiv, {
                text: codes[0].code,
                width: 256,
                height: 256
            });

            const h3 = document.createElement('h3');
            h3.textContent = "Pressione espaço para avançar";

            const span = document.createElement('span');
            span.textContent = codes[0].code;

            qr_corder_reader.dataset.codeId = codes[0].id;

            qr_corder_reader.innerHTML = '';

            qr_corder_reader.appendChild(h3);
            qr_corder_reader.appendChild(span);
            qr_corder_reader.appendChild(qrDiv);

            qr_corder_reader.style.display = "flex";
            init_reader_header.style.display = "none";
        }

        async function showQrCode() {
            qr_corder_reader.innerHTML = '<div class="lds-dual-ring"></div>';

            let url;
            let putObject = {};
            
            switch (qr_code_container.dataset.batchStatusId) {
                case "1":
                    url = `/api/v1/codes?batch_id=${batch_id}&has_entry=false&has_exit=false`;
                    putObject.has_entry = true;
                    break;
                case "2":
                    url = `/api/v1/codes?batch_id=${batch_id}&has_entry=true&has_exit=false`;
                    putObject.has_exit = true;
                    break;
                case "3":
                    return;
            }

            const response = await postData(`/api/v1/codes/${qr_corder_reader.dataset.codeId}`, "put", putObject)

            switch (response.code) {
                case 201:
                    break;
                case 400:
                    pushNotify("error", response.message)
                    code_input.value = "";
                    toggleHoverContainer();
                    return;
                case 500:
                    pushNotify("error", "Server Error")
                    code_input.value = "";
                    toggleHoverContainer();
                    return;
            }

            let batch = await fetchInfo(`/api/v1/batches/${batch_id}`);
            batch = batch.data;

            let quantity;

            switch (batch.status_id) {
                case 1:
                    quantity = batch.has_entry;
                    break;
                case 2:
                    quantity = batch.has_exit;
                    break;                   
                case 3:
                    quantity = batch.has_exit;
                    break;             
            }

            counter.innerHTML = `${quantity}/${batch.quantity} bipados`
            
            let codes = await fetchInfo(url);
            codes = codes.data;
            
            if(codes.length < 1){
                qr_corder_reader.innerHTML = "";
                const h3 = document.createElement('h3');
                h3.textContent = "Todos os Qr Codes foram lidos";
                
                qr_corder_reader.appendChild(h3);

                qr_corder_reader.style.display = "flex";
                init_reader_header.style.display = "none";
                return;
            }

            const qrDiv = document.createElement('div');
            new QRCode(qrDiv, {
                text: codes[0].code,
                width: 256,
                height: 256
            });

            const h3 = document.createElement('h3');
            h3.textContent = "Pressione espaço para avançar";

            const span = document.createElement('span');
            span.textContent = codes[0].code;

            qr_corder_reader.dataset.codeId = codes[0].id;

            qr_corder_reader.innerHTML = "";

            qr_corder_reader.appendChild(h3);
            qr_corder_reader.appendChild(span);
            qr_corder_reader.appendChild(qrDiv);
        }

        qr_corder_reader.addEventListener("click", e => {
            qr_corder_reader.classList.add("selected")
        })

        qr_corder_reader.addEventListener("focusout", e => {
            qr_corder_reader.classList.remove("selected")
        })

        let allowAdvance = true;
        qr_corder_reader.addEventListener('keydown', async (e) => {
            if (e.key === 'Enter') {
                if (document.activeElement === qr_corder_reader && allowAdvance == true) {
                    allowAdvance = false;
                    await showQrCode()
                    allowAdvance = true;
                }
            }
        });

                
        function corDate(date){
			if(!date) return "";

			date = new Date(date)

			date.setHours(date.getHours() - 3, date.getMinutes(), date.getSeconds())

			date = date.toISOString();

			var newDate = date.split(".")[0]
			newDate = newDate.split("T");

			var day = newDate[0].split("-")
			return `${day[2]}/${day[1]}/${day[0]} ${newDate[1]}`;
		}
    </script>
</body>
</html>